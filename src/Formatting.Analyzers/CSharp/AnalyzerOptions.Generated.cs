// Copyright (c) Josef Pihrt and Contributors. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

namespace Roslynator.Formatting.CSharp
{
    public static partial class AnalyzerOptions
    {
        internal static readonly AnalyzerOptionDescriptor RemoveEmptyLineBetweenSingleLineAccessors = new AnalyzerOptionDescriptor("roslynator.RCS0011.invert", DiagnosticRules.AddEmptyLineBetweenSingleLineAccessorsOrViceVersa);
        internal static readonly AnalyzerOptionDescriptor RemoveEmptyLineBetweenUsingDirectivesWithDifferentRootNamespace = new AnalyzerOptionDescriptor("roslynator.RCS0015.invert", DiagnosticRules.AddEmptyLineBetweenUsingDirectivesWithDifferentRootNamespaceOrViceVersa);
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterBinaryOperatorInsteadOfBeforeIt = new AnalyzerOptionDescriptor("roslynator.RCS0027.invert", DiagnosticRules.AddNewLineBeforeBinaryOperatorInsteadOfAfterItOrViceVersa);
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterConditionalOperatorInsteadOfBeforeIt = new AnalyzerOptionDescriptor("roslynator.RCS0028.invert", DiagnosticRules.AddNewLineBeforeConditionalOperatorInsteadOfAfterItOrViceVersa);
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterExpressionBodyArrowInsteadOfBeforeIt = new AnalyzerOptionDescriptor("roslynator.RCS0032.invert", DiagnosticRules.AddNewLineBeforeExpressionBodyArrowInsteadOfAfterItOrViceVersa);
        internal static readonly AnalyzerOptionDescriptor RemoveNewLineBetweenClosingBraceAndWhileKeyword = new AnalyzerOptionDescriptor("roslynator.RCS0051.invert", DiagnosticRules.AddNewLineBetweenClosingBraceAndWhileKeywordOrViceVersa);
        internal static readonly AnalyzerOptionDescriptor AddNewLineAfterEqualsSignInsteadOfBeforeIt = new AnalyzerOptionDescriptor("roslynator.RCS0052.invert", DiagnosticRules.AddNewLineBeforeEqualsSignInsteadOfAfterItOrViceVersa);
    }
}